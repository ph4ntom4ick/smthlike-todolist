{"ast":null,"code":"import _initializerDefineProperty from \"C:/Users/Phantom/Desktop/react-ts-todo/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"C:/Users/Phantom/Desktop/react-ts-todo/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"C:/Users/Phantom/Desktop/react-ts-todo/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _class, _descriptor, _descriptor2, _descriptor3;\n// TaskStore.ts\nimport { observable, action } from 'mobx';\nlet TaskStore = (_class = class TaskStore {\n  constructor() {\n    _initializerDefineProperty(this, \"tasks\", _descriptor, this);\n    _initializerDefineProperty(this, \"newTask\", _descriptor2, this);\n    // Ensure newTask is properly defined\n    _initializerDefineProperty(this, \"isListLayout\", _descriptor3, this);\n  }\n  addTask(newTask) {\n    this.tasks.push(newTask);\n  }\n  toggleTask(taskId) {\n    const task = this.tasks.find(task => task.id === taskId);\n    if (task) {\n      task.completed = !task.completed;\n    }\n  }\n  removeTask(taskId) {\n    this.tasks = this.tasks.filter(task => task.id !== taskId);\n  }\n  setNewTask(newTask) {\n    // Ensure setNewTask is defined properly\n    this.newTask = newTask;\n  }\n  setIsListLayout(isListLayout) {\n    this.isListLayout = isListLayout;\n  }\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"tasks\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"newTask\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"isListLayout\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"addTask\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addTask\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"toggleTask\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"toggleTask\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"removeTask\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"removeTask\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setNewTask\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setNewTask\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setIsListLayout\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setIsListLayout\"), _class.prototype)), _class);\nexport default new TaskStore();","map":{"version":3,"names":["observable","action","TaskStore","_class","constructor","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","addTask","newTask","tasks","push","toggleTask","taskId","task","find","id","completed","removeTask","filter","setNewTask","setIsListLayout","isListLayout","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","Object","getOwnPropertyDescriptor"],"sources":["C:/Users/Phantom/Desktop/react-ts-todo/src/TaskStore.ts"],"sourcesContent":["// TaskStore.ts\r\nimport { observable, action } from 'mobx';\r\nimport { Task } from './App';\r\n\r\nclass TaskStore {\r\n  @observable tasks: Task[] = [];\r\n  @observable newTask: string = ''; // Ensure newTask is properly defined\r\n  @observable isListLayout: boolean = true;\r\n\r\n  @action addTask(newTask: Task) {\r\n    this.tasks.push(newTask);\r\n  }\r\n\r\n  @action toggleTask(taskId: string) {\r\n    const task = this.tasks.find(task => task.id === taskId);\r\n    if (task) {\r\n      task.completed = !task.completed;\r\n    }\r\n  }\r\n\r\n  @action removeTask(taskId: string) {\r\n    this.tasks = this.tasks.filter(task => task.id !== taskId);\r\n  }\r\n\r\n  @action setNewTask(newTask: string) { // Ensure setNewTask is defined properly\r\n    this.newTask = newTask;\r\n  }\r\n\r\n  @action setIsListLayout(isListLayout: boolean) {\r\n    this.isListLayout = isListLayout;\r\n  }\r\n}\r\n\r\nexport default new TaskStore();\r\n"],"mappings":";;;;AAAA;AACA,SAASA,UAAU,EAAEC,MAAM,QAAQ,MAAM;AAAC,IAGpCC,SAAS,IAAAC,MAAA,GAAf,MAAMD,SAAS,CAAC;EAAAE,YAAA;IAAAC,0BAAA,gBAAAC,WAAA;IAAAD,0BAAA,kBAAAE,YAAA;IAEoB;IAAAF,0BAAA,uBAAAG,YAAA;EAAA;EAG1BC,OAAOA,CAACC,OAAa,EAAE;IAC7B,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,OAAO,CAAC;EAC1B;EAEQG,UAAUA,CAACC,MAAc,EAAE;IACjC,MAAMC,IAAI,GAAG,IAAI,CAACJ,KAAK,CAACK,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,EAAE,KAAKH,MAAM,CAAC;IACxD,IAAIC,IAAI,EAAE;MACRA,IAAI,CAACG,SAAS,GAAG,CAACH,IAAI,CAACG,SAAS;IAClC;EACF;EAEQC,UAAUA,CAACL,MAAc,EAAE;IACjC,IAAI,CAACH,KAAK,GAAG,IAAI,CAACA,KAAK,CAACS,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACE,EAAE,KAAKH,MAAM,CAAC;EAC5D;EAEQO,UAAUA,CAACX,OAAe,EAAE;IAAE;IACpC,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEQY,eAAeA,CAACC,YAAqB,EAAE;IAC7C,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;AACF,CAAC,GAAAjB,WAAA,GAAAkB,yBAAA,CAAArB,MAAA,CAAAsB,SAAA,YA1BEzB,UAAU;EAAA0B,YAAA;EAAAC,UAAA;EAAAC,QAAA;EAAAC,WAAA,WAAAA,CAAA;IAAA,OAAiB,EAAE;EAAA;AAAA,IAAAtB,YAAA,GAAAiB,yBAAA,CAAArB,MAAA,CAAAsB,SAAA,cAC7BzB,UAAU;EAAA0B,YAAA;EAAAC,UAAA;EAAAC,QAAA;EAAAC,WAAA,WAAAA,CAAA;IAAA,OAAmB,EAAE;EAAA;AAAA,IAAArB,YAAA,GAAAgB,yBAAA,CAAArB,MAAA,CAAAsB,SAAA,mBAC/BzB,UAAU;EAAA0B,YAAA;EAAAC,UAAA;EAAAC,QAAA;EAAAC,WAAA,WAAAA,CAAA;IAAA,OAAyB,IAAI;EAAA;AAAA,IAAAL,yBAAA,CAAArB,MAAA,CAAAsB,SAAA,cAEvCxB,MAAM,GAAA6B,MAAA,CAAAC,wBAAA,CAAA5B,MAAA,CAAAsB,SAAA,cAAAtB,MAAA,CAAAsB,SAAA,GAAAD,yBAAA,CAAArB,MAAA,CAAAsB,SAAA,iBAINxB,MAAM,GAAA6B,MAAA,CAAAC,wBAAA,CAAA5B,MAAA,CAAAsB,SAAA,iBAAAtB,MAAA,CAAAsB,SAAA,GAAAD,yBAAA,CAAArB,MAAA,CAAAsB,SAAA,iBAONxB,MAAM,GAAA6B,MAAA,CAAAC,wBAAA,CAAA5B,MAAA,CAAAsB,SAAA,iBAAAtB,MAAA,CAAAsB,SAAA,GAAAD,yBAAA,CAAArB,MAAA,CAAAsB,SAAA,iBAINxB,MAAM,GAAA6B,MAAA,CAAAC,wBAAA,CAAA5B,MAAA,CAAAsB,SAAA,iBAAAtB,MAAA,CAAAsB,SAAA,GAAAD,yBAAA,CAAArB,MAAA,CAAAsB,SAAA,sBAINxB,MAAM,GAAA6B,MAAA,CAAAC,wBAAA,CAAA5B,MAAA,CAAAsB,SAAA,sBAAAtB,MAAA,CAAAsB,SAAA,IAAAtB,MAAA;AAKT,eAAe,IAAID,SAAS,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}